import java.awt.*;
import objectdraw.*;

public class Triangle extends Shape {
    private Point p1;
    private Point p2;
    private Point p3;
  
  /* 
   * Name: Constructor  
   * Purpose: initialize the triangle
   * Parameters: none 
   */
    public Triangle() 
    {
        super("Triangle");
        this.setP1(new Point(0,0));
        this.setP3(new Point(0,0));
        this.setP2(new Point(0,0));
    }
  /* 
   * Name: Constructor  
   * Purpose: initialize the triangle
   * Parameters: Point p1, Point p1, Point p3
   */
    public Triangle(Point p1, Point p2, Point p3) {
        super("Triangle");
        this.setP1(p1);
        this.setP2(p2);
        this.setP3(p3);
    }
  /* 
   * Name: Constructor  
   * Purpose: deep copy the triangle
   * Parameters: Triangle tri
   */
    public Triangle(Triangle tri) 
    {
     super(tri.getName());
     this.setP1(tri.getP1());
     this.setP2(tri.getP2());
     this.setP3(tri.getP3());
    }
    
  /* 
   * Name: getter  
   * Purpose: get vertex point
   * Parameters: none 
   */  
    public Point getP1()
    {
      return this.p1;
    }
    
  /* 
   * Name: getter  
   * Purpose: get vertex point
   * Parameters: none 
   */
    public Point getP2()
    {
      return this.p2;
    }
    
  /* 
   * Name: getter  
   * Purpose: get vertex point
   * Parameters: none 
   */
    public Point getP3()
    {
      return this.p3;
    }
    
  /* 
   * Name: setter  
   * Purpose: set vertex point
   * Parameters: Point p1 
   */
    private void setP1(Point p1)
    {
      this.p1 = p1;
    }
    
  /* 
   * Name: setter  
   * Purpose: set vertex point
   * Parameters: Point p2 
   */    
    private void setP2(Point p2)
    {
      this.p2 = p2;
    }
        
  /* 
   * Name: setter  
   * Purpose: set vertex point
   * Parameters: Point p3 
   */
    private void setP3(Point p3)
    {
      this.p3 = p3;
    }
  /* 
   * Name: move  
   * Purpose: shift the triangle
   * Parameters: int xDelta, ine yDelta 
   */
    public void move(int xDelta, int yDelta) 
    {
        this.setP1(new Point (this.getP1().getX() + xDelta, this.getP1().getY() + yDelta));
        this.setP2(new Point (this.getP2().getX() + xDelta, this.getP2().getY() + yDelta));
        this.setP3(new Point (this.getP3().getX() + xDelta, this.getP3().getY() + yDelta));
    }
  /* 
   * Name: toString  
   * Purpose: print the information for triangle
   * Parameters: none
   */    
    @Override
    public String toString() 
    {
        return super.getName() + " : ( " + this.getP1().toString() + ", " + this.getP2().toString() + ", "
          + this.getP3().toString() + " )";
    }
  /* 
   * Name: equals()  
   * Purpose: deep compare with object o
   * Parameters: object o
   */
    @Override
    public boolean equals(Object o) 
    {
         if(o == null)
    {
      return false;
    }
    
    if(this.getClass() != o.getClass())
    {
      return false;
    }
    Triangle checkT = (Triangle)o;
    
    if(this.getP1() == checkT.getP1() && this.getP2() == checkT.getP2() &&
       this.getP3() == checkT.getP3())
    {
      return true;
    }
    else
    {
      return false;
    }
    }

  /* 
   * Name: hashCode()  
   * Purpose: turn an integer that represents the object
   * Parameters: none
   */
  @Override
  public int hashCode() 
  {
    return this.toString().hashCode();
  }
  /* 
   * Name: draw()  
   * Purpose: draw out the with cse8b_line triangle 
   * Parameters: none
   */
    public void draw(DrawingCanvas canvas, Color c, boolean fill) 
    {
        CSE8B_Line line1 = new CSE8B_Line(this.getP1(), this.getP2());
        CSE8B_Line line2 = new CSE8B_Line(this.getP2(), this.getP3());
        CSE8B_Line line3 = new CSE8B_Line(this.getP1(), this.getP3());
        
        line1.draw(canvas,c,fill);
        line2.draw(canvas,c,fill);
        line3.draw(canvas,c,fill);
    }

}
